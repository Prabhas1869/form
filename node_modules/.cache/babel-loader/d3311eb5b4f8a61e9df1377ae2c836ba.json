{"ast":null,"code":"var _jsxFileName = \"/home/appinventiv/form/src/Components/ImageCropper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport { Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"70vw\",\n  height: \"60vh\",\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4\n};\n\nfunction ImageCropper(_ref) {\n  _s();\n\n  let {\n    open,\n    setOpen,\n    imageURL,\n    setImageURL,\n    setFieldValue,\n    fileName,\n    fileType\n  } = _ref;\n\n  const handleClose = () => setOpen(false);\n\n  const [cropper, setCropper] = useState();\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      fetch(cropper.getCroppedCanvas().toDataURL()).then(res => res.blob()).then(blob => {\n        const file = new File([blob], fileName, {\n          type: fileType\n        });\n        setFieldValue(\"file\", file);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Image Cropper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Cropper, {\n          style: {\n            height: \"40vh\",\n            width: \"100%\"\n          },\n          zoomTo: 0.5,\n          initialAspectRatio: 1,\n          center: true,\n          src: imageURL,\n          viewMode: 1,\n          minCropBoxHeight: 10,\n          minCropBoxWidth: 10,\n          background: false,\n          responsive: true,\n          autoCropArea: 1,\n          checkOrientation: false,\n          onInitialized: instance => {\n            setCropper(instance);\n          },\n          guides: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: getCropData,\n          children: \"Crop Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageCropper, \"c51jImOMiZ09OrUkJUF/HAnKY/A=\");\n\n_c = ImageCropper;\nexport default ImageCropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"sources":["/home/appinventiv/form/src/Components/ImageCropper.js"],"names":["React","useState","Box","Typography","Modal","Cropper","Button","style","position","top","left","transform","width","height","bgcolor","border","boxShadow","p","ImageCropper","open","setOpen","imageURL","setImageURL","setFieldValue","fileName","fileType","handleClose","cropper","setCropper","getCropData","fetch","getCroppedCanvas","toDataURL","then","res","blob","file","File","type","instance"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Modal from \"@mui/material/Modal\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport { Button } from \"@mui/material\";\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"70vw\",\n  height: \"60vh\",\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\nfunction ImageCropper({\n  open,\n  setOpen,\n  imageURL,\n  setImageURL,\n  setFieldValue,\n  fileName,\n  fileType,\n}) {\n\n\n  const handleClose = () => setOpen(false);\n\n  const [cropper, setCropper] = useState();\n\n  const getCropData = () => {\n    if (typeof cropper !== \"undefined\") {\n      \n      fetch(cropper.getCroppedCanvas().toDataURL())\n        .then((res) => res.blob())\n        .then((blob) => {\n          const file = new File([blob], fileName, { type: fileType });\n          setFieldValue(\"file\", file);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Image Cropper\n          </Typography>\n\n          <Cropper\n            style={{ height: \"40vh\", width: \"100%\" }}\n            zoomTo={0.5}\n            initialAspectRatio={1}\n            center={true}\n          \n            src={imageURL}\n            viewMode={1}\n            minCropBoxHeight={10}\n            minCropBoxWidth={10}\n            background={false}\n            responsive={true}\n            autoCropArea={1}\n            checkOrientation={false} \n            onInitialized={(instance) => {\n              setCropper(instance);\n            }}\n            guides={true}\n          />\n\n          <Button onClick={getCropData}>Crop Image</Button>\n          <Button onClick={handleClose}>Close</Button>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\nexport default ImageCropper;"]},"metadata":{},"sourceType":"module"}