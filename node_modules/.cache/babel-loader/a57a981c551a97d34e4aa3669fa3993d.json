{"ast":null,"code":"import * as Yup from \"yup\";\nimport \"yup-phone\";\nconst SUPPORTED_FORMATS = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\"];\nexport const validationSchema = Yup.object({\n  name: Yup.string().matches(/^[A-Za-z ]*$/, \"Invalid name\").required(\"Required\").min(3, \"Minimum 3 Characters required\"),\n  email: Yup.string().required(\"Required\").email(\"Invalid Email\"),\n  number: Yup.string().phone(\"invalid number\").required(\"Required\"),\n  password: Yup.string().required(\"Enter your password\").matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/, \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"),\n  file: Yup.mixed().required(\"Required\").test(\"fileSize\", \"File Too Large\", value => {\n    let valid = true;\n\n    if (value && value.size) {\n      valid = value.size / 1024 / 1024 > 2 ? false : true;\n    } else {\n      valid = false;\n    }\n\n    return valid;\n  }).test(\"fileFormat\", \"Unsupported Format\", value => {\n    return value && SUPPORTED_FORMATS.includes(value.type);\n  })\n});","map":{"version":3,"sources":["/home/appinventiv/form/src/Schemas/FormSchema.js"],"names":["Yup","SUPPORTED_FORMATS","validationSchema","object","name","string","matches","required","min","email","number","phone","password","file","mixed","test","value","valid","size","includes","type"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAO,WAAP;AAEA,MAAMC,iBAAiB,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,WAA5B,EAAyC,WAAzC,CAA1B;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,GAAG,CAACG,MAAJ,CAAW;AACzCC,EAAAA,IAAI,EAAEJ,GAAG,CAACK,MAAJ,GACHC,OADG,CACK,cADL,EACqB,cADrB,EAEHC,QAFG,CAEM,UAFN,EAGHC,GAHG,CAGC,CAHD,EAGI,+BAHJ,CADmC;AAMzCC,EAAAA,KAAK,EAAET,GAAG,CAACK,MAAJ,GAAaE,QAAb,CAAsB,UAAtB,EAAkCE,KAAlC,CAAwC,eAAxC,CANkC;AAQzCC,EAAAA,MAAM,EAAEV,GAAG,CAACK,MAAJ,GAAaM,KAAb,CAAmB,gBAAnB,EAAqCJ,QAArC,CAA8C,UAA9C,CARiC;AASzCK,EAAAA,QAAQ,EAAEZ,GAAG,CAACK,MAAJ,GACPE,QADO,CACE,qBADF,EAEPD,OAFO,CAGN,gEAHM,EAIN,oGAJM,CAT+B;AAczCO,EAAAA,IAAI,EAAEb,GAAG,CAACc,KAAJ,GACHP,QADG,CACM,UADN,EAEHQ,IAFG,CAEE,UAFF,EAEc,gBAFd,EAEiCC,KAAD,IAAW;AAC7C,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAID,KAAK,IAAIA,KAAK,CAACE,IAAnB,EAAyB;AACvBD,MAAAA,KAAK,GAAGD,KAAK,CAACE,IAAN,GAAa,IAAb,GAAoB,IAApB,GAA2B,CAA3B,GAA+B,KAA/B,GAAuC,IAA/C;AACD,KAFD,MAEO;AACLD,MAAAA,KAAK,GAAG,KAAR;AACD;;AAED,WAAOA,KAAP;AACD,GAZG,EAaHF,IAbG,CAaE,YAbF,EAagB,oBAbhB,EAauCC,KAAD,IAAW;AACnD,WAAOA,KAAK,IAAIf,iBAAiB,CAACkB,QAAlB,CAA2BH,KAAK,CAACI,IAAjC,CAAhB;AACD,GAfG;AAdmC,CAAX,CAAzB","sourcesContent":["import * as Yup from \"yup\";\nimport \"yup-phone\";\n\nconst SUPPORTED_FORMATS = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\"];\n\nexport const validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(/^[A-Za-z ]*$/, \"Invalid name\")\n    .required(\"Required\")\n    .min(3, \"Minimum 3 Characters required\"),\n\n  email: Yup.string().required(\"Required\").email(\"Invalid Email\"),\n\n  number: Yup.string().phone(\"invalid number\").required(\"Required\"),\n  password: Yup.string()\n    .required(\"Enter your password\")\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\n      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character\"),\n  file: Yup.mixed()\n    .required(\"Required\")\n    .test(\"fileSize\", \"File Too Large\", (value) => {\n      let valid = true;\n\n      if (value && value.size) {\n        valid = value.size / 1024 / 1024 > 2 ? false : true;\n      } else {\n        valid = false;\n      }\n\n      return valid;\n    })\n    .test(\"fileFormat\", \"Unsupported Format\", (value) => {\n      return value && SUPPORTED_FORMATS.includes(value.type);\n    }),\n});\n"]},"metadata":{},"sourceType":"module"}